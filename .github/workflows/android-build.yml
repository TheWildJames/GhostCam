name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Clean project
      run: ./gradlew clean
      
    - name: Build APK
      run: ./gradlew build
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ghostcam-apk
        path: app/build/outputs/apk/**/*.apk
        retention-days: 30
        
    - name: Run tests
      run: ./gradlew test
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: app/build/reports/tests/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: ghostcam-apk
        path: ./apk/
        
    - name: Get version from build.gradle
      id: get_version
      run: |
        VERSION_NAME=$(grep 'versionName' app/build.gradle | sed 's/.*versionName "\(.*\)".*/\1/')
        VERSION_CODE=$(grep 'versionCode' app/build.gradle | sed 's/.*versionCode \(.*\)/\1/')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION_NAME" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: GhostCam ${{ steps.get_version.outputs.tag }}
        body: |
          ## GhostCam Release ${{ steps.get_version.outputs.version_name }}
          
          ### Changes
          - Automated build from commit ${{ github.sha }}
          - Version Code: ${{ steps.get_version.outputs.version_code }}
          
          ### Installation
          1. Download the APK file below
          2. Enable "Unknown Sources" in your Android settings
          3. Install the APK
          4. Ensure your device is rooted for full functionality
          
          ### Requirements
          - Android 5.0+ (API 21+)
          - Root access required
          - Xposed Framework (for hooking functionality)
          
          **⚠️ Warning: Use responsibly and in accordance with local laws**
        draft: false
        prerelease: false
        
    - name: Find and upload release APK
      run: |
        # Find the release APK (look for release in path or filename)
        RELEASE_APK=$(find ./apk -name "*.apk" | grep -i release | head -1)
        if [ -z "$RELEASE_APK" ]; then
          # If no release APK found, use the first APK
          RELEASE_APK=$(find ./apk -name "*.apk" | head -1)
        fi
        
        if [ -n "$RELEASE_APK" ]; then
          echo "Found APK: $RELEASE_APK"
          # Upload the APK
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/vnd.android.package-archive" \
               --data-binary @"$RELEASE_APK" \
               "${{ steps.create_release.outputs.upload_url }}?name=GhostCam-${{ steps.get_version.outputs.version_name }}-release.apk&label=GhostCam-${{ steps.get_version.outputs.version_name }}-release.apk"
        else
          echo "No APK found to upload"
          exit 1
        fi